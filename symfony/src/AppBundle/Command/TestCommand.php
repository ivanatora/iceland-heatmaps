<?php

namespace AppBundle\Command;

use AppBundle\Entity\Recording;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Validator\Constraints\DateTime;

class TestCommand extends ContainerAwareCommand
{
    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
        $this->setName('app:test')
            ->setDescription('test some stuff')
            ->setHelp('aksdkaskaskas');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        print "test\n";
//        parent::execute($input, $output); // TODO: Change the autogenerated stub
        $url = 'http://gagnaveita.vegagerdin.is/api/vedur2014_1';
        $json = file_get_contents($url);
        try {
            $response = json_decode($json, true);
        } catch (Exception $e) {
            print "$json \n\n cannot be decoded\n";
            exit();
        }
//        print_r($response);

        $em = $this->getContainer()->get('doctrine')->getManager();

        $date_fetched = new \DateTime();

        foreach ($response as $item) {
            print_r($item);

            $recording = new Recording();
            $recording->setName($item['Nafn'] ?? 'Unknown')
//            $recording->setForDate(date('Y-m-d H:i:s', strtotime($item['Dags'])));
                ->setForDate(new \DateTime($item['Dags']) ?? new \DateTime())
                ->setDateFetched($date_fetched)
                ->setHeight($item['Haed'] ?? 0)
                ->setLat($item['Breidd'])
                ->setLon($item['Lengd'])
                ->setMeteoRef($item['Nr_Vedurstofa'] ?? '')
                ->setPressure($item['Loftthrystingur'] ?? 0)
                ->setRef($item['Nr'] ?? '')
                ->setTemperature($item['Hiti'] ?? 0)
                ->setTraffic10Min($item['Umf10Min'] ?? 0)
                ->setTrafficDay($item['UmfSum'] ?? 0);

            try {
                $em->persist($recording);
                $em->flush();
            } catch (Exception $e) {
                print $e->getMessage();
                exit();
            }
        }


    }
}